// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"activationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flatFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxActivatedOperators\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ActivatedOperatorsLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyActivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyForceDeactivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedCallbackGasLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"InvalidL1FeeCalculationMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"coefficient\",\"type\":\"uint8\"}],\"name\":\"InvalidL1FeeCoefficient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LessThanActivationThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleVerificationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotActivatedOperatorForThisRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughActivatedOperators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotActivated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RevealNotInAscendingOrder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"DeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"coefficient\",\"type\":\"uint8\"}],\"name\":\"L1FeeCalculationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"RandomNumberGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"activatedOperators\",\"type\":\"address[]\"}],\"name\":\"RandomNumberRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAndActivate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfOperators\",\"type\":\"uint256\"}],\"name\":\"estimateRequestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateRequestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"secrets\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"generateRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivatedOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getActivatedOperatorsAtRound\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getActivatedOperatorsAtRoundLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivatedOperatorsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1FeeCalculationMode\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"coefficient\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leaves\",\"type\":\"bytes32[]\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"cv\",\"type\":\"bytes32\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"requestRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"s_activatedOperatorOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"s_activatedOperatorOrderAtRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_activationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"s_depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_flatFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_maxActivatedOperators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"s_requestInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"s_roundInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfillSucceeded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"coefficient\",\"type\":\"uint8\"}],\"name\":\"setL1FeeCalculation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"submitMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x610160604052346100765761001e61001561021d565b939290926103dd565b61002661007b565b614a4e610ce782396080518161395b015260a05181613992015260c05181613922015260e051816141680152610100518161418d0152610120518161371c0152610140518161375b0152614a4e90f35b610081565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100ad90610085565b810190811060018060401b038211176100c557604052565b61008f565b906100dd6100d661007b565b92836100a3565b565b5f80fd5b5f80fd5b90565b6100f3816100e7565b036100fa57565b5f80fd5b9050519061010b826100ea565b565b5f80fd5b5f80fd5b60018060401b0381116101315761012d602091610085565b0190565b61008f565b90825f9392825e0152565b9092919261015661015182610115565b6100ca565b938185526020850190828401116101725761017092610136565b565b610111565b9080601f830112156101955781602061019293519101610141565b90565b61010d565b91909160a081840312610218576101b3835f83016100fe565b926101c181602084016100fe565b926101cf82604085016100fe565b92606081015160018060401b03811161021357836101ee918301610177565b92608082015160018060401b03811161020e5761020b9201610177565b90565b6100e3565b6100e3565b6100df565b61023b61573580380380610230816100ca565b92833981019061019a565b9091929394565b5f1b90565b906102535f1991610242565b9181191691161790565b90565b61027461026f610279926100e7565b61025d565b6100e7565b90565b90565b9061029461028f61029b92610260565b61027c565b8254610247565b9055565b90565b90565b60018060a01b031690565b6102c46102bf6102c9926102a2565b61025d565b6102a5565b90565b6102d5906102b0565b90565b5f5260205f2090565b634e487b7160e01b5f52603260045260245ffd5b5490565b610302816102f5565b82101561031c576103146001916102d8565b910201905f90565b6102e1565b1b90565b9190600861034591029161033f60018060a01b0384610321565b92610321565b9181191691161790565b61036361035e610368926102a5565b61025d565b6102a5565b90565b6103749061034f565b90565b6103809061036b565b90565b90565b919061039c6103976103a493610377565b610383565b908354610325565b9055565b90815491680100000000000000008310156103d857826103d09160016103d6950181556102f9565b90610386565b565b61008f565b6103fd906103f6610404949561040b9733919091610429565b600461027f565b600561027f565b600661027f565b610427610418600f61029f565b6104215f6102cc565b906103a8565b565b9061043492916104f8565b565b60a01b90565b9061044b60ff60a01b91610436565b9181191691161790565b60ff1690565b61046f61046a610474926102a2565b61025d565b610455565b90565b90565b9061048f61048a6104969261045b565b610477565b825461043c565b9055565b60a81b90565b906104af60ff60a81b9161049a565b9181191691161790565b90565b6104d06104cb6104d5926104b9565b61025d565b610455565b90565b906104ed6104e86104f4926104bc565b610477565b82546104a0565b9055565b90610503929161054a565b61050e5f600361047a565b61051a606460036104d8565b565b610525906102a5565b90565b6105319061051c565b9052565b9190610548905f60208501940190610528565b565b91610554916105a6565b8061056f6105696105645f6102cc565b61051c565b9161051c565b1461057f5761057d90610714565b565b6105a261058b5f6102cc565b5f918291631e4fbdf760e01b835260048301610535565b0390fd5b906105b0916105de565b565b90565b6105c96105c46105ce926105b2565b61025d565b6100e7565b90565b6105db60016105b5565b90565b906105e891610618565b6105fa6105f36105d1565b600261027f565b565b90565b90565b60200190565b5190565b6106159061036b565b90565b9061065461066f926106338161062d5f6105fc565b90610a01565b6101205261064b8361064560016105fc565b90610a01565b610140526105ff565b61066661066082610608565b91610602565b2060e0526105ff565b61068161067b82610608565b91610602565b20610100524660a052610692610b06565b60805261069e3061060c565b60c052565b5f1c90565b60018060a01b031690565b6106bf6106c4916106a3565b6106a8565b90565b6106d190546106b3565b90565b906106e560018060a01b0391610242565b9181191691161790565b906107046106ff61070b92610377565b610383565b82546106d4565b9055565b5f0190565b61071e60036106c7565b6107298260036106ef565b9061075d6107577f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610377565b91610377565b9161076661007b565b806107708161070f565b0390a3565b5f90565b90565b61079061078b61079592610779565b61025d565b6100e7565b90565b5190565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156107d0575b60208310146107cb57565b61079c565b91607f16916107c0565b5f5260205f2090565b601f602091010490565b919060086108089102916108025f1984610321565b92610321565b9181191691161790565b919061082861082361083093610260565b61027c565b9083546107ed565b9055565b5f90565b61084a91610844610834565b91610812565b565b5b818110610858575050565b806108655f600193610838565b0161084d565b9190601f811161087b575b505050565b6108876108ac936107da565b906020610893846107e3565b830193106108b4575b6108a5906107e3565b019061084c565b5f8080610876565b91506108a58192905061089c565b1c90565b906108d6905f19906008026108c2565b191690565b816108e5916108c6565b906002021790565b906108f781610798565b9060018060401b0382116109b5576109198261091385546107b0565b8561086b565b602090601f831160011461094d5791809161093c935f92610941575b50506108db565b90555b565b90915001515f80610935565b601f1983169161095c856107da565b925f5b81811061099d57509160029391856001969410610983575b5050500201905561093f565b610993910151601f8416906108c6565b90555f8080610977565b9193602060018192878701518155019501920161095f565b61008f565b906109c4916108ed565b565b90565b90565b6109e06109db6109e5926109c6565b610242565b6109c9565b90565b6109f260ff6109cc565b90565b6109fe906109c9565b90565b90610a0a610775565b50610a1c610a17836105ff565b610608565b610a2f610a29602061077c565b916100e7565b105f14610a435750610a4090610c5c565b90565b5f610a51610a579392610b77565b016109ba565b610a67610a626109e8565b6109f5565b90565b5f90565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90565b610a9c90516109c9565b90565b610aa8906109c9565b9052565b610ab5906100e7565b9052565b90959492610b0494610af3610afd92610ae9608096610adf60a088019c5f890190610a9f565b6020870190610a9f565b6040850190610a9f565b6060830190610aac565b0190610528565b565b610b0e610a6a565b50610b17610a6e565b610b61610b2460e0610a92565b91610b52610b33610100610a92565b46610b3d3061060c565b91610b4661007b565b96879560208701610ab9565b602082018103825203826100a3565b610b73610b6d82610608565b91610602565b2090565b90565b90565b610b91610b8c610b9692610b7a565b61025d565b6100e7565b90565b60209181520190565b610bc1610bca602093610bcf93610bb881610798565b93848093610b99565b95869101610136565b610085565b0190565b610be89160208201915f818403910152610ba2565b90565b610c05610c00610bfa83610608565b92610602565b610a92565b9060208110610c13575b5090565b610c25905f1990602003600802610321565b165f610c0f565b610c38610c3d916106a3565b610260565b90565b610c54610c4f610c59926100e7565b610242565b6109c9565b90565b610c64610775565b50610c6e816105ff565b90610c7882610608565b610c8b610c85601f610b7d565b916100e7565b11610cc05750610cb881610cb2610cac610ca7610cbd95610beb565b610c2c565b91610608565b17610c40565b6109f5565b90565b610ce290610ccc61007b565b91829163305a27a960e01b835260048301610bd3565b0390fdfe60806040526004361015610013575b611254565b61001d5f356101fc565b80630c048a81146101f75780630f15f4c0146101f257806311c593a8146101ed57806314530741146101e85780631b6a72db146101e35780632e1a7d4d146101de5780633506a24a146101d957806336088f52146101d457806339d0c151146101cf57806342875fad146101ca5780634869bfb6146101c557806348ff3be8146101c057806351b42b00146101bb57806360ce6c3b146101b6578063715018a6146101b157806377343032146101ac57806384b0196e146101a75780638da5cb5b146101a25780639ac5cfbc1461019d5780639c18182014610198578063a5ab301414610193578063a9f664be1461018e578063b5f3abb014610189578063d0e30db014610184578063e59845341461017f578063e8fd14e01461017a578063eb16e23b14610175578063ecd21a7e14610170578063efd50b211461016b5763f2fde38b0361000e57611221565b6111ed565b6111b8565b611180565b61106c565b610ef9565b610e6c565b610e41565b610dc1565b610d5f565b610d1b565b610cd7565b610ca2565b610c51565b610acd565b610a9a565b610a65565b610a19565b6109e3565b610974565b61080f565b610732565b6105eb565b6105b5565b61050d565b6104d8565b6103ad565b610323565b6102ba565b610280565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261021a57565b61020c565b1c90565b90565b61023690600861023b930261021f565b610223565b90565b906102499154610226565b90565b61025860055f9061023e565b90565b90565b6102679061025b565b9052565b919061027e905f6020850194019061025e565b565b346102b057610290366004610210565b6102ac61029b61024c565b6102a3610202565b9182918261026b565b0390f35b610208565b5f0190565b346102e8576102ca366004610210565b6102d261136c565b6102da610202565b806102e4816102b5565b0390f35b610208565b60ff1690565b6102fc906102ed565b9052565b91602061032192949361031a60408201965f8301906102f3565b01906102f3565b565b3461035457610333366004610210565b61033b6113ce565b90610350610347610202565b92839283610300565b0390f35b610208565b5f80fd5b610366816102ed565b0361036d57565b5f80fd5b9050359061037e8261035d565b565b91906040838203126103a8578061039c6103a5925f8601610371565b93602001610371565b90565b61020c565b346103dc576103c66103c0366004610380565b90611418565b6103ce610202565b806103d8816102b5565b0390f35b610208565b6103ea8161025b565b036103f157565b5f80fd5b90503590610402826103e1565b565b9060208282031261041d5761041a915f016103f5565b90565b61020c565b5190565b60209181520190565b60200190565b60018060a01b031690565b61044990610435565b90565b61045590610440565b9052565b906104668160209361044c565b0190565b60200190565b9061048d61048761048084610422565b8093610426565b9261042f565b905f5b81811061049d5750505090565b9091926104b66104b06001928651610459565b9461046a565b9101919091610490565b6104d59160208201915f818403910152610470565b90565b34610508576105046104f36104ee366004610404565b6114fa565b6104fb610202565b918291826104c0565b0390f35b610208565b3461053b57610525610520366004610404565b6116d1565b61052d610202565b80610537816102b5565b0390f35b610208565b90565b61054c81610540565b0361055357565b5f80fd5b9050359061056482610543565b565b919060408382031261058e578061058261058b925f86016103f5565b93602001610557565b90565b61020c565b61059c90610540565b9052565b91906105b3905f60208501940190610593565b565b346105e6576105e26105d16105cb366004610566565b9061178b565b6105d9610202565b918291826105a0565b0390f35b610208565b3461061b576105fb366004610210565b61061761060661182a565b61060e610202565b9182918261026b565b0390f35b610208565b90565b61063761063261063c9261025b565b610620565b61025b565b90565b9061064990610623565b5f5260205260405f2090565b5f1c90565b60018060a01b031690565b61067161067691610655565b61065a565b90565b6106839054610665565b90565b61069261069791610655565b610223565b90565b6106a49054610686565b90565b6106b290600a61063f565b906106be5f8301610679565b916106cb6001820161069a565b916106e460036106dd6002850161069a565b930161069a565b90565b6106f090610440565b9052565b6107296107309461071f606094989795610715608086019a5f8701906106e7565b602085019061025e565b604083019061025e565b019061025e565b565b346107665761076261074d610748366004610404565b6106a7565b90610759949294610202565b948594856106f4565b0390f35b610208565b61077481610440565b0361077b57565b5f80fd5b9050359061078c8261076b565b565b906020828203126107a7576107a4915f0161077f565b90565b61020c565b6107c06107bb6107c592610435565b610620565b610435565b90565b6107d1906107ac565b90565b6107dd906107c8565b90565b906107ea906107d4565b5f5260205260405f2090565b61080c906108076008915f926107e0565b61023e565b90565b3461083f5761083b61082a61082536600461078e565b6107f6565b610832610202565b9182918261026b565b0390f35b610208565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061087090610848565b810190811067ffffffffffffffff82111761088a57604052565b610852565b906108a261089b610202565b9283610866565b565b67ffffffffffffffff81116108bc5760208091020190565b610852565b5f80fd5b909291926108da6108d5826108a4565b61088f565b938185526020808601920283019281841161091757915b8383106108fe5750505050565b6020809161090c8486610557565b8152019201916108f1565b6108c1565b9080601f8301121561093a57816020610937933591016108c5565b90565b610844565b9060208282031261096f575f82013567ffffffffffffffff811161096a57610967920161091c565b90565b610359565b61020c565b346109a4576109a061098f61098a36600461093f565b611853565b610997610202565b918291826105a0565b0390f35b610208565b90916060828403126109de576109db6109c4845f85016103f5565b936109d281602086016103f5565b936040016103f5565b90565b61020c565b34610a1457610a106109ff6109f93660046109a9565b91611868565b610a07610202565b9182918261026b565b0390f35b610208565b34610a4757610a29366004610210565b610a31611963565b610a39610202565b80610a43816102b5565b0390f35b610208565b610a6290610a5d6009915f926107e0565b61023e565b90565b34610a9557610a91610a80610a7b36600461078e565b610a4c565b610a88610202565b9182918261026b565b0390f35b610208565b34610ac857610aaa366004610210565b610ab26119ba565b610aba610202565b80610ac4816102b5565b0390f35b610208565b610ad8366004610210565b610ae0611a5c565b610ae8610202565b80610af2816102b5565b0390f35b60ff60f81b1690565b610b0890610af6565b9052565b5190565b60209181520190565b90825f9392825e0152565b610b43610b4c602093610b5193610b3a81610b0c565b93848093610b10565b95869101610b19565b610848565b0190565b5190565b60209181520190565b60200190565b610b719061025b565b9052565b90610b8281602093610b68565b0190565b60200190565b90610ba9610ba3610b9c84610b55565b8093610b59565b92610b62565b905f5b818110610bb95750505090565b909192610bd2610bcc6001928651610b75565b94610b86565b9101919091610bac565b93959194610c2d610c22610c4195610c14610c3795610c4e9c9a610c0760e08c01925f8d0190610aff565b8a820360208c0152610b24565b9088820360408a0152610b24565b97606087019061025e565b60808501906106e7565b60a0830190610593565b60c0818403910152610b8c565b90565b34610c8857610c61366004610210565b610c84610c6c611b08565b93610c7b979597939193610202565b97889788610bdc565b0390f35b610208565b9190610ca0905f602085019401906106e7565b565b34610cd257610cb2366004610210565b610cce610cbd611b92565b610cc5610202565b91829182610c8d565b0390f35b610208565b34610d0757610d03610cf2610ced366004610404565b611ba8565b610cfa610202565b9182918261026b565b0390f35b610208565b610d1860065f9061023e565b90565b34610d4b57610d2b366004610210565b610d47610d36610d0c565b610d3e610202565b9182918261026b565b0390f35b610208565b610d5c60045f9061023e565b90565b34610d8f57610d6f366004610210565b610d8b610d7a610d50565b610d82610202565b9182918261026b565b0390f35b610208565b9190604083820312610dbc5780610db0610db9925f86016103f5565b936020016103f5565b90565b61020c565b34610df257610dee610ddd610dd7366004610d94565b90611bda565b610de5610202565b9182918261026b565b0390f35b610208565b63ffffffff1690565b610e0981610df7565b03610e1057565b5f80fd5b90503590610e2182610e00565b565b90602082820312610e3c57610e39915f01610e14565b90565b61020c565b610e68610e57610e52366004610e23565b612268565b610e5f610202565b9182918261026b565b0390f35b610e77366004610210565b610e7f6122c0565b610e87610202565b80610e91816102b5565b0390f35b9190604083820312610ebd5780610eb1610eba925f86016103f5565b9360200161077f565b90565b61020c565b90610ecc90610623565b5f5260205260405f2090565b610ef1610ef692610eec600c935f94610ec2565b6107e0565b61023e565b90565b34610f2a57610f26610f15610f0f366004610e95565b90610ed8565b610f1d610202565b9182918261026b565b0390f35b610208565b5f80fd5b909182601f83011215610f6d5781359167ffffffffffffffff8311610f68576020019260208302840111610f6357565b6108c1565b610f2f565b610844565b909182601f83011215610fac5781359167ffffffffffffffff8311610fa7576020019260208302840111610fa257565b6108c1565b610f2f565b610844565b60a08183031261106757610fc7825f83016103f5565b92602082013567ffffffffffffffff81116110625783610fe8918401610f33565b929093604082013567ffffffffffffffff811161105d578161100b918401610f72565b929093606082013567ffffffffffffffff8111611058578361102e918401610f33565b929093608082013567ffffffffffffffff81116110535761104f9201610f33565b9091565b610359565b610359565b610359565b610359565b61020c565b346110a45761108e61107f366004610fb1565b97969096959195949294612cdf565b611096610202565b806110a0816102b5565b0390f35b610208565b906110b390610623565b5f5260205260405f2090565b90565b6110ce6110d391610655565b6110bf565b90565b6110e090546110c2565b90565b60ff1690565b6110f56110fa91610655565b6110e3565b90565b61110790546110e9565b90565b6111159060076110a9565b6111205f82016110d6565b9161113960026111326001850161069a565b93016110fd565b90565b151590565b61114a9061113c565b9052565b60409061117761117e949695939661116d60608401985f850190610593565b602083019061025e565b0190611141565b565b346111b3576111af61119b611196366004610404565b61110a565b6111a6939193610202565b9384938461114e565b0390f35b610208565b346111e8576111c8366004610210565b6111e46111d3612cf2565b6111db610202565b918291826104c0565b0390f35b610208565b3461121c57611206611200366004610566565b90612dd0565b61120e610202565b80611218816102b5565b0390f35b610208565b3461124f5761123961123436600461078e565b612e41565b611241610202565b8061124b816102b5565b0390f35b610208565b5f80fd5b611260612e59565b6112686112f5565b611270612ebe565b565b1561127957565b5f632d79848360e11b815280611291600482016102b5565b0390fd5b9061129f906107d4565b5f5260205260405f2090565b5f1b90565b906112bc60ff916112ab565b9181191691161790565b6112cf9061113c565b90565b90565b906112ea6112e56112f1926112c6565b6112d2565b82546112b0565b9055565b61132e61130c611307600833906107e0565b61069a565b61132761132161131c600461069a565b61025b565b9161025b565b1015611272565b61134261133d600e3390611295565b6110fd565b611352575b61135033612f6f565b565b6113675f611362600e3390611295565b6112d5565b611347565b611374611258565b565b5f90565b60a01c90565b60ff1690565b6113926113979161137a565b611380565b90565b6113a49054611386565b90565b60a81c90565b6113b96113be916113a7565b611380565b90565b6113cb90546113ad565b90565b6113d6611376565b506113df611376565b506113ea600361139a565b906113f560036113c1565b90565b9061140a91611405613031565b61140c565b565b906114169161318b565b565b90611422916113f8565b565b606090565b9061143390610623565b5f5260205260405f2090565b5490565b60209181520190565b5f5260205f2090565b61145f9054610665565b90565b60010190565b9061148561147f6114788461143f565b8093611443565b9261144c565b905f5b8181106114955750505090565b9091926114b56114af6001926114aa87611455565b610459565b94611462565b9101919091611488565b906114c991611468565b90565b906114ec6114e5926114dc610202565b938480926114bf565b0383610866565b565b6114f7906114cc565b90565b61151161151691611509611424565b50600b611429565b6114ee565b90565b61152a90611525612e59565b6115f9565b611532612ebe565b565b634e487b7160e01b5f52601160045260245ffd5b61155761155d9193929361025b565b9261025b565b820391821161156857565b611534565b906115795f19916112ab565b9181191691161790565b90565b9061159b6115966115a292610623565b611583565b825461156d565b9055565b90565b6115bd6115b86115c2926115a6565b610620565b61025b565b90565b6115ce906107ac565b90565b6115da906115c5565b90565b6115e6906107c8565b90565b6115f1610202565b3d5f823e3d90fd5b5f8080809361162681611620611611600833906107e0565b9161161b8361069a565b611548565b90611586565b61163a611635600933906107e0565b61069a565b8061164d611647856115a9565b9161025b565b14158061169b575b61168a575b5061166c611667336115d1565b6115dd565b828215611681575bf11561167c57565b6115e9565b506108fc611674565b6116959033906132ec565b5f61165a565b506116b06116ab600833906107e0565b61069a565b6116cb6116c56116c0600461069a565b61025b565b9161025b565b10611655565b6116da90611519565b565b5f90565b7f57c2b89c59ae260783767fab64e1efb54c9d4efc972cb97383506f4a244b06cb90565b61170e604061088f565b90565b9061171b9061025b565b9052565b9061172990610540565b9052565b61173690610540565b9052565b9060208061175c936117525f8201515f860190610b68565b015191019061172d565b565b91602061177f92949361177860608201965f830190610593565b019061173a565b565b60200190565b5190565b906117ec6118049261179b6116dc565b506117c66117a76116e0565b91936117bd6117b4611704565b955f8701611711565b6020850161171f565b6117dd6117d1610202565b9384926020840161175e565b60208201810382520382610866565b6117fe6117f882611787565b91611781565b206133aa565b90565b5f90565b90565b61182261181d6118279261180b565b610620565b61025b565b90565b611832611807565b50611850611840600f61143f565b61184a600161180e565b90611548565b90565b6118659061185f6116dc565b506133e3565b90565b9161187e92611875611807565b50919091613608565b90565b611889612e59565b6118916118e1565b611899612ebe565b565b156118a257565b5f635c962f1360e01b8152806118ba600482016102b5565b0390fd5b156118c557565b5f63749e7c0d60e11b8152806118dd600482016102b5565b0390fd5b6119616118f86118f3600933906107e0565b61069a565b6119158161190e6119085f6115a9565b9161025b565b141561189b565b61194461192c611927600e3390611295565b6110fd565b61193e6119385f61113c565b9161113c565b146118be565b61195a6001611955600e3390611295565b6112d5565b33906132ec565b565b61196b611881565b565b611975613031565b61197d6119a7565b565b61199361198e611998926115a6565b610620565b610435565b90565b6119a49061197f565b90565b6119b86119b35f61199b565b6136aa565b565b6119c261196d565b565b6119cc612e59565b6119d4611a03565b6119dc612ebe565b565b6119ed6119f39193929361025b565b9261025b565b82018092116119fe57565b611534565b611a5134611a2f611a28611a19600833906107e0565b92611a238461069a565b6119de565b8092611586565b611a4a611a44611a3f600461069a565b61025b565b9161025b565b1015611272565b611a5a33612f6f565b565b611a646119c4565b565b5f90565b606090565b5f90565b606090565b611a81906107c8565b90565b611a98611a93611a9d926115a6565b6112ab565b610540565b90565b67ffffffffffffffff8111611ab85760208091020190565b610852565b90611acf611aca83611aa0565b61088f565b918252565b369037565b90611afe611ae683611abd565b92602080611af48693611aa0565b9201910390611ad4565b565b600f60f81b90565b611b10611a66565b50611b19611a6a565b50611b22611a6a565b50611b2b611807565b50611b34611a6f565b50611b3d6116dc565b50611b46611a73565b50611b4f61370e565b90611b5861374d565b904690611b6430611a78565b90611b6e5f611a84565b90611b80611b7b5f6115a9565b611ad9565b90611b89611b00565b96959493929190565b611b9a611a6f565b50611ba56003610679565b90565b611bc7611bc2611bd792611bba611807565b50600b611429565b61143f565b611bd1600161180e565b90611548565b90565b90611bf991611be7611807565b5090611bf3600f61143f565b91613608565b90565b90611c0e91611c09612e59565b612023565b90611c17612ebe565b565b90565b611c30611c2b611c3592611c19565b610620565b61025b565b90565b611c44622625a0611c1c565b90565b611c5b611c56611c6092610df7565b610620565b61025b565b90565b15611c6a57565b5f631cf7ab7960e01b815280611c82600482016102b5565b0390fd5b90565b611c9d611c98611ca292611c86565b610620565b61025b565b90565b15611cac57565b5f6377599fd960e01b815280611cc4600482016102b5565b0390fd5b15611ccf57565b5f632ca2f52b60e11b815280611ce7600482016102b5565b0390fd5b6001611cf7910161025b565b90565b611d04608061088f565b90565b90611d1190610440565b9052565b611d1f9051610440565b90565b90611d3360018060a01b03916112ab565b9181191691161790565b90565b90611d55611d50611d5c926107d4565b611d3d565b8254611d22565b9055565b611d6a905161025b565b90565b90611dca60606003611dd094611d905f8201611d8a5f8801611d15565b90611d40565b611da960018201611da360208801611d60565b90611586565b611dc260028201611dbc60408801611d60565b90611586565b019201611d60565b90611586565b565b90611ddc91611d6d565b565b611ded611df39193929361025b565b9261025b565b91611dff83820261025b565b928184041490151715611e0e57565b611534565b600190818003010490565b1b90565b91906008611e3d910291611e375f1984611e1e565b92611e1e565b9181191691161790565b9190611e5d611e58611e6593610623565b611583565b908354611e22565b9055565b611e7b91611e75611807565b91611e47565b565b5b818110611e89575050565b80611e965f600193611e69565b01611e7e565b9091828110611eab575b505050565b611ec9611ec3611ebd611ed495611e13565b92611e13565b9261144c565b918201910190611e7d565b5f8080611ea6565b90680100000000000000008111611f055781611efa611f039361143f565b90828155611e9c565b565b610852565b611f1a906008611f1f930261021f565b61065a565b90565b91906008611f42910291611f3c60018060a01b0384611e1e565b92611e1e565b9181191691161790565b611f5582610422565b9167ffffffffffffffff8311611fb857611f83611f7d600192611f788686611edc565b61042f565b9261144c565b9204915f5b838110611f955750505050565b6001906020611fab611fa686611d15565b611d3d565b9401938184015501611f88565b610852565b90611fc791611f4c565b565b634e487b7160e01b5f52603260045260245ffd5b90611fe782610422565b811015611ff8576020809102010190565b611fc9565b916120209261201360408201935f83019061025e565b6020818403910152610470565b90565b506120488161204161203b612036611c38565b61025b565b91611c47565b1115611c63565b612052600f61143f565b61206f816120696120636002611c89565b9161025b565b11611ca5565b61209f3461209861209261208d863a6120888892611c47565b613608565b61025b565b9161025b565b1015611cc8565b6121186120ac600d61069a565b6120bf6120b882611ceb565b600d611586565b926121076120fe33926120f942916120f03491936120e76120de611cfa565b985f8a01611d07565b60208801611711565b60408601611711565b611c47565b60608301611711565b612113600a859061063f565b611dd2565b612120611424565b5061212b600f6114ee565b926121418461213c600b8690611429565b611fbd565b61214b600161180e565b92612158600c8290610ec2565b91612163600461069a565b9360015b1561220c575b6121f65f966121856121808a8390611fdd565b611d15565b612199826121948984906107e0565b611586565b6121ad6121a8600983906107e0565b61069a565b90346121d76121d06121c1600885906107e0565b926121cb8461069a565b611548565b8092611586565b6121e96121e38b61025b565b9161025b565b106121fc575b5050611ceb565b95612167565b612205916132ec565b5f806121ef565b8561221f6122198361025b565b9161025b565b1061216d575093509391505082907fa76cb50e13ed7dc76531452d748a43f7f4822af11af8b0c27781247c32035b749161226361225a610202565b92839283611ffd565b0390a1565b61227990612274611807565b611bfc565b90565b612284612e59565b61228c612296565b612294612ebe565b565b6122be346122b86122a9600833906107e0565b916122b38361069a565b6119de565b90611586565b565b6122c861227c565b565b906122e398979695949392916122de612e59565b612600565b6122eb612ebe565b565b5090565b906123036122fe836108a4565b61088f565b918252565b369037565b9061233261231a836122f1565b9260208061232886936108a4565b9201910390612308565b565b9190811015612344576020020190565b611fc9565b3561235381610543565b90565b90565b61236561236a91610540565b612356565b9052565b61237a81602093612359565b0190565b5190565b9061238c8261237e565b81101561239d576020809102010190565b611fc9565b6123ac9051610540565b90565b6123bb6123c091610655565b610623565b90565b906123cd82610b55565b8110156123de576020809102010190565b611fc9565b905090565b60200190565b6123f790610540565b9052565b90612408816020936123ee565b0190565b60200190565b9061242f6124296124228461237e565b80936123e3565b926123e8565b905f5b81811061243f5750505090565b90919261245861245260019286516123fb565b9461240c565b9101919091612432565b61246b91612412565b90565b606090565b90565b1561247d57565b5f63624dc35160e01b815280612495600482016102b5565b0390fd5b90565b6124b06124ab6124b592612499565b6112ab565b610540565b90565b156124bf57565b5f6317e97eb760e31b8152806124d7600482016102b5565b0390fd5b91908110156124eb576020020190565b611fc9565b356124fa8161035d565b90565b6125326125399461252860609498979561251e608086019a5f870190610593565b60208501906102f3565b6040830190610593565b0190610593565b565b1561254257565b5f638baa579f60e01b81528061255a600482016102b5565b0390fd5b90565b91602061258292949361257b60408201965f83019061025e565b019061025e565b565b90565b5490565b634e487b7160e01b5f52601260045260245ffd5b6125ab6125b19161025b565b9161025b565b9081156125bc570490565b61258b565b5f5260205f2090565b6125d381612587565b8210156125ed576125e56001916125c1565b910201905f90565b611fc9565b906125fd9154611f0a565b90565b97939892969195969490946126168688906122ed565b946126208661230d565b9861262a87611ad9565b9b612633611807565b5b806126476126418b61025b565b9161025b565b101561273157806127278f6127228f8f8f6126df6126da61271a946126d361269f6126ae61268b61268661272c9f996126f39a6127029a919091612334565b612349565b612693610202565b9283916020830161236e565b60208201810382520382610866565b6126c06126ba82611787565b91611781565b206126ce83918d9092612382565b61171f565b8990612382565b6123a2565b6126e7610202565b9283916020830161236e565b60208201810382520382610866565b61271461270e82611787565b91611781565b206123af565b8490926123c3565b611711565b61379b565b612634565b50909192939495969b989a61278261275b61276a8f9d61274f610202565b92839160208301612462565b60208201810382520382610866565b61277c61277682611787565b91611781565b206123af565b9861279561278f8d611ad9565b9c611ad9565b9d8e6127a05f6115a9565b905b816127b56127af8561025b565b9161025b565b101561281457906128098f928f8f946127f36127eb6127f8936127e56127e061280e9a928a906123c3565b611d60565b906137bb565b8690926123c3565b611711565b612804838490926123c3565b611711565b61379b565b8f6127a2565b9195999d905061282d92969a9e94989c93979b506137fa565b61283561246e565b509b8c9361287b61285961285361284e60078a906110a9565b612473565b966133e3565b61287561286f61286a5f8a016110d6565b610540565b91610540565b14612476565b612887600c8790610ec2565b94612890611807565b5b806128a461289e8861025b565b9161025b565b1015612a48578f908e8e8e8e8e8e8e8e87858a906128c192612334565b6128ca90612349565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a06128f49061249c565b906128fe90610540565b1115612909906124b8565b986129126116e0565b91908961291e91612382565b612927906123a2565b61292f611704565b915f83019061293d91611711565b602082019061294b9161171f565b612953610202565b91829160208301916129649261175e565b6020820181038252036129779082610866565b61298081611787565b9061298a90611781565b20612994906133aa565b939087906129a1926124db565b6129aa906124f0565b939086906129b792612334565b6129c090612349565b939085906129cd92612334565b6129d690612349565b6129de610202565b9384936129eb93856124fd565b5f805203905a915f916001602094fa15612a4357612a39612a21612a1c612a3e94612a165f516112ab565b906107e0565b61069a565b612a33612a2d5f6115a9565b9161025b565b1161253b565b61379b565b612891565b6115e9565b50985098509850985098935050975050612a618661230d565b96612a6a611807565b5b80612a7e612a788a61025b565b9161025b565b1015612acd57612ac890612ac3612ab1612aac888b612aa6612aa18d88906123c3565b611d60565b91612334565b612349565b612abe8c91849092612382565b61171f565b61379b565b612a6b565b509450945094612b259250612afe9150612b0d90612ae9611807565b50612af2610202565b92839160208301612462565b60208201810382520382610866565b612b1f612b1982611787565b91611781565b206123af565b92612b338460018301611586565b612bae612b4a612b45600a859061063f565b61255e565b916002612ba7612b5b5f8601610679565b6004612b956337ed11db60e01b612b868a8d90612b76610202565b9586946020860190815201612561565b60208201810382520382610866565b612ba16003880161069a565b9161382e565b91016112d5565b612bce6002612bc7612bc2600b8690611429565b612584565b920161069a565b92612c00612bdb83612587565b94612bfa81612bf488612bee600161180e565b90611548565b9061259f565b906119de565b94612c0b600461069a565b93612c16600161180e565b5b80612c2a612c248961025b565b9161025b565b1015612c9b57612c9690612c91612c4b612c458884906125ca565b906125f2565b612c5f612c5a600983906107e0565b61069a565b908b612c89612c82612c73600885906107e0565b92612c7d8461069a565b6119de565b8092611586565b8a919261387d565b61379b565b612c17565b5093509350935050907f252851c72bba973a3eff4c55d976631b74c5e463b736ab3ba7ea37cbe40bbc1991612cda612cd1610202565b92839283612561565b0390a1565b90612cf098979695949392916122ca565b565b612cfa611424565b50612d05600f6114ee565b90565b90612d1a91612d15612e59565b612d7f565b612d22612ebe565b565b15612d2b57565b5f637dbd0a0d60e11b815280612d43600482016102b5565b0390fd5b612d5090610540565b90565b612d5c90610655565b90565b90612d74612d6f612d7b92612d47565b612d53565b825461156d565b9055565b5f612dc8612dce93612dc0612da8612da3612d9c600c8890610ec2565b33906107e0565b61069a565b612dba612db4866115a9565b9161025b565b11612d24565b9260076110a9565b01612d5f565b565b90612dda91612d08565b565b612ded90612de8613031565b612def565b565b80612e0a612e04612dff5f61199b565b610440565b91610440565b14612e1a57612e18906136aa565b565b612e3d612e265f61199b565b5f918291631e4fbdf760e01b835260048301610c8d565b0390fd5b612e4a90612ddc565b565b612e566002611c89565b90565b612e63600261069a565b612e7c612e76612e71612e4c565b61025b565b9161025b565b14612e9557612e93612e8c612e4c565b6002611586565b565b5f633ee5aeb560e01b815280612ead600482016102b5565b0390fd5b612ebb600161180e565b90565b612ed0612ec9612eb1565b6002611586565b565b15612ed957565b5f63ef65161f60e01b815280612ef1600482016102b5565b0390fd5b15612efc57565b5f633e8fbd5f60e01b815280612f14600482016102b5565b0390fd5b9190612f2e612f29612f36936107d4565b611d3d565b908354611f22565b9055565b9081549168010000000000000000831015612f6a5782612f62916001612f68950181556125ca565b90612f18565b565b610852565b612f9e612f86612f81600984906107e0565b61069a565b612f98612f925f6115a9565b9161025b565b14612ed2565b612fe2612fab600f61143f565b612fd181612fca612fc4612fbf600661069a565b61025b565b9161025b565b1115612ef5565b612fdd600984906107e0565b611586565b612ff6612fef600f612584565b8290612f3a565b61302c7f0cc43938d137e7efade6a531f663e78c1fc75257b0d65ffda2fdaf70cb49cdf991613023610202565b91829182610c8d565b0390a1565b613039611b92565b61305261304c6130476138fb565b610440565b91610440565b0361305957565b61307b6130646138fb565b5f91829163118cdaa760e01b835260048301610c8d565b0390fd5b90565b61309661309161309b9261307f565b610620565b6102ed565b90565b91906130b1905f602085019401906102f3565b565b6130c76130c26130cc926115a6565b610620565b6102ed565b90565b90565b6130e66130e16130eb926130cf565b610620565b6102ed565b90565b60a01b90565b9061310360ff60a01b916130ee565b9181191691161790565b61312161311c613126926102ed565b610620565b6102ed565b90565b90565b9061314161313c6131489261310d565b613129565b82546130f4565b9055565b60a81b90565b9061316160ff60a81b9161314c565b9181191691161790565b9061318061317b6131879261310d565b613129565b8254613152565b9055565b8061319f6131996004613082565b916102ed565b101561324f57816131b86131b25f6130b3565b916102ed565b148015613234575b613216576131cf81600361312c565b6131da82600361316b565b907f8e63dc2f2e669ce73bebd2580bb9dd9a5d17fa2d046ac02057d8349fc0b0c2f391613211613208610202565b92839283610300565b0390a1565b613230825f91829162d4503560e51b83526004830161309e565b0390fd5b508161324961324360646130d2565b916102ed565b116131c0565b613269905f918291621c300f60e81b83526004830161309e565b0390fd5b6132768161143f565b8210156132905761328860019161144c565b910201905f90565b611fc9565b634e487b7160e01b5f52603160045260245ffd5b6132bb916132b5611a6f565b91612f18565b565b6132c681612587565b80156132e75760019003906132e46132de83836125ca565b906132a9565b55565b613295565b61335a9061335561332461331e600f613318613308600f61143f565b613312600161180e565b90611548565b9061326d565b906125f2565b9161333b83613335600f849061326d565b90612f18565b61334d613348600f612584565b6132bd565b9160096107e0565b611586565b61336f5f61336a600984906107e0565b611e69565b6133a57f5d10eb48d8c00fb4cc9120533a99e2eac5eb9d0f8ec06216b2e4d5b1ff175a4d9161339c610202565b91829182610c8d565b0390a1565b6133c4906133b66116dc565b506133bf613908565b6139c2565b90565b6133d09061025b565b5f1981146133de5760010190565b611534565b906133ec6116dc565b506133f68261237e565b9161340b83613405600161180e565b90611548565b916134158361230d565b9161341f5f6115a9565b916134295f6115a9565b906134335f6115a9565b5b806134476134418961025b565b9161025b565b1015613530576134e3908561346461345e8b61025b565b9161025b565b105f14613509576134de6134cc61348d613488886134818b6133c7565b9a90612382565b6123a2565b5b8b6134a261349c8b9261025b565b9161025b565b105f146134e8576134c56134c0896134b98c6133c7565b9b90612382565b6123a2565b5b90613a03565b6134d98991849092612382565b61171f565b61379b565b613434565b6135046134ff8b6134f88a6133c7565b9990612382565b6123a2565b6134c6565b6134de6134cc61352b6135268a61351f896133c7565b9890612382565b6123a2565b61348e565b50955050505061355d91613552613558929161354c600161180e565b90611548565b90612382565b6123a2565b90565b90565b61357761357261357c92613560565b610620565b61025b565b90565b90565b61359661359161359b9261357f565b610620565b61025b565b90565b90565b6135b56135b06135ba9261359e565b610620565b61025b565b90565b6135c760446135a1565b90565b90565b6135e16135dc6135e6926135ca565b610620565b61025b565b90565b90565b6136006135fb613605926135e9565b610620565b61025b565b90565b61366a61365a6136a1926136546136a79695613622611807565b509161364e61363c61527f6136378a91613563565b611dde565b61364862020cbe613582565b906119de565b906119de565b90611dde565b613664600561069a565b906119de565b9161369b6136766135bd565b916136966136906101249261368b60806135cd565b611dde565b916135ec565b6119de565b90613b17565b906119de565b90565b6136b46003610679565b6136bf826003611d40565b906136f36136ed7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936107d4565b916107d4565b916136fc610202565b80613706816102b5565b0390a3565b90565b613716611a6a565b5061374a7f00000000000000000000000000000000000000000000000000000000000000006137445f61370b565b90613e7d565b90565b613755611a6a565b5061378a7f0000000000000000000000000000000000000000000000000000000000000000613784600161370b565b90613e7d565b90565b90613798910161025b565b90565b6137b8906137a7611807565b506137b2600161180e565b9061378d565b90565b6137c3611807565b50806137d76137d18461025b565b9161025b565b115f146137ec57906137e891611548565b5b90565b6137f591611548565b6137e9565b6138289161381061380a83613ecb565b92613f08565b61382261381c83613ecb565b92613f08565b92613f70565b565b5f90565b9061383761382a565b505a611388811061387957611388849103604081049003604081049003111561387557813b15613871575f9283809360208451940192f190565b5f80fd5b5f80fd5b5f80fd5b91909161389261388c5f6115a9565b9161025b565b1491826138dc575b5050806138b9575b6138aa575b50565b6138b390612f6f565b5f6138a7565b506138d76138d16138cc600e8490611295565b6110fd565b1561113c565b6138a2565b6138f29192506138ec909261025b565b9161025b565b10155f8061389a565b613903611a6f565b503390565b6139106116dc565b5061391a30611a78565b61394c6139467f0000000000000000000000000000000000000000000000000000000000000000610440565b91610440565b1480613988575b5f1461397d577f000000000000000000000000000000000000000000000000000000000000000090565b613985614152565b90565b50466139bc6139b67f000000000000000000000000000000000000000000000000000000000000000061025b565b9161025b565b14613953565b6042916139cd6116dc565b50604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b613a0b6116dc565b505f5260205260405f2090565b613a2c613a27613a319261180b565b610620565b6102ed565b90565b613a3e6001613a18565b90565b613a4a5f6130b3565b90565b613a61613a5c613a6692611c86565b610620565b6102ed565b90565b613a736002613a4d565b90565b600f602160991b0190565b613a8a906107ac565b90565b613a9690613a81565b90565b613aa9613aa4613a76565b613a8d565b90565b613ab5906107c8565b90565b90565b613acf613aca613ad492613ab8565b610620565b61025b565b90565b613ae16047613abb565b90565b60e01b90565b90505190613af7826103e1565b565b90602082820312613b1257613b0f915f01613aea565b90565b61020c565b90613b20611807565b50613b2b600361139a565b80613b45613b3f613b3a613a34565b6102ed565b916102ed565b145f14613b8d5750613b84613b7f613b70613b6b613b8a95613b65613ad7565b906119de565b61454a565b92613b79613ad7565b906119de565b61454a565b906119de565b90565b80613ba7613ba1613b9c613a41565b6102ed565b916102ed565b145f14613cee57506020613bff92613bc5613bc0613a99565b613aac565b613bf4613bdf63f1c7a58b93613bd9613ad7565b906119de565b92613be8610202565b96879485938493613ae4565b83526004830161026b565b03915afa908115613ce957613c63925f92613cb7575b50602090613c29613c24613a99565b613aac565b613c58613c4363f1c7a58b93613c3d613ad7565b906119de565b92613c4c610202565b96879485938493613ae4565b83526004830161026b565b03915afa908115613cb257613c7f925f92613c82575b506119de565b90565b613ca491925060203d8111613cab575b613c9c8183610866565b810190613af9565b905f613c79565b503d613c92565b6115e9565b6020919250613cdb90823d8111613ce2575b613cd38183610866565b810190613af9565b9190613c15565b503d613cc9565b6115e9565b613d07613d01613cfc613a69565b6102ed565b916102ed565b145f14613d2c57613d23613d1d613d2993614238565b91614238565b906119de565b90565b5050613d375f6115a9565b90565b90565b613d51613d4c613d5692613d3a565b6112ab565b610540565b90565b613d6360ff613d3d565b90565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015613d9a575b6020831014613d9557565b613d66565b91607f1691613d8a565b60209181520190565b5f5260205f2090565b905f9291805490613dd0613dc983613d7a565b8094613da4565b916001811690815f14613e275750600114613deb575b505050565b613df89192939450613dad565b915f925b818410613e0f57505001905f8080613de6565b60018160209295939554848601520191019290613dfc565b92949550505060ff19168252151560200201905f8080613de6565b90613e4c91613db6565b90565b90613e6f613e6892613e5f610202565b93848092613e42565b0383610866565b565b613e7a90613e4f565b90565b90613e86611a6a565b50613e9082612d47565b613ea9613ea3613e9e613d59565b610540565b91610540565b14155f14613ebe5750613ebb90614918565b90565b613ec89150613e71565b90565b602090613ed6611807565b500190565b90565b613ef2613eed613ef792613edb565b610620565b61025b565b90565b90613f05910261025b565b90565b613f4090613f14611807565b50613f3a613f2a613f2483613ecb565b92610b55565b613f346020613ede565b90613efa565b9061378d565b90565b90613f4e910361025b565b90565b90565b613f68613f63613f6d92613f51565b610620565b61025b565b90565b92613f7c828590613f43565b613f8f613f896040613f54565b9161025b565b106140db57613f9d84614948565b9484928492613fb686613fb06020613ede565b9061378d565b95613fcb88613fc56020613ede565b9061378d565b965b87613fe0613fda8661025b565b9161025b565b101561407b57613ff9613ff289614948565b8b90614955565b61402c575b6140156140269161400f6020613ede565b9061378d565b976140206020613ede565b9061378d565b96613fcd565b949561401561405c61404b614026936140456020613ede565b9061378d565b986140566020613ede565b9061378d565b96614068898b90614975565b614073888290614975565b915050613ffe565b5091955093956140a6929750614092818890614975565b61409d828590614975565b90868492613f70565b6140d26140c06140d9956140ba6020613ede565b9061378d565b93916140cc6020613ede565b9061378d565b9192613f70565b565b50505050565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90565b909594926141509461413f6141499261413560809661412b60a088019c5f890190610593565b6020870190610593565b6040850190610593565b606083019061025e565b01906106e7565b565b61415a6116dc565b506141636140e1565b6141da7f0000000000000000000000000000000000000000000000000000000000000000916141cb7f0000000000000000000000000000000000000000000000000000000000000000466141b630611a78565b916141bf610202565b96879560208701614105565b60208201810382520382610866565b6141ec6141e682611787565b91611781565b2090565b6141fa60446135a1565b90565b90565b61421461420f614219926141fd565b610620565b61025b565b90565b6142259061025b565b604d811161423357600a0a90565b611534565b61425661426691614247611807565b506142506141f0565b906119de565b6142606010614200565b90611dde565b614291602061427b614276613a99565b613aac565b630c18c16290614289610202565b938492613ae4565b825281806142a1600482016102b5565b03915afa8015614499576142e8926142c0925f92614469575b506119de565b60206142d26142cd613a99565b613aac565b63519b4bd3906142e0610202565b948592613ae4565b825281806142f8600482016102b5565b03915afa90811561446457614314925f92614434575b50611dde565b61433f6020614329614324613a99565b613aac565b63313ce56790614337610202565b938492613ae4565b8252818061434f600482016102b5565b03915afa801561442f5761436a915f91614401575b5061421c565b614395602061437f61437a613a99565b613aac565b63f45e65d89061438d610202565b938492613ae4565b825281806143a5600482016102b5565b03915afa80156143fc576143c9936143c4925f926143cc575b50611dde565b61259f565b90565b6143ee91925060203d81116143f5575b6143e68183610866565b810190613af9565b905f6143be565b503d6143dc565b6115e9565b614422915060203d8111614428575b61441a8183610866565b810190613af9565b5f614364565b503d614410565b6115e9565b61445691925060203d811161445d575b61444e8183610866565b810190613af9565b905f61430e565b503d614444565b6115e9565b61448b91925060203d8111614492575b6144838183610866565b810190613af9565b905f6142ba565b503d614479565b6115e9565b905051906144ab82610e00565b565b906020828203126144c6576144c3915f0161449e565b90565b61020c565b6144df6144da6144e4926141fd565b610620565b610df7565b90565b6144f36144f991610df7565b91610df7565b029061450482610df7565b91820361450d57565b611534565b61452661452161452b926102ed565b610620565b61025b565b90565b61454261453d614547926130cf565b610620565b61025b565b90565b61456861457891614559611807565b506145626141f0565b906119de565b6145726010614200565b90611dde565b6145a3602061458d614588613a99565b613aac565b63c59859189061459b610202565b938492613ae4565b825281806145b3600482016102b5565b03915afa80156148ad576145d9915f9161487f575b506145d360106144cb565b906144e7565b9061460560206145ef6145ea613a99565b613aac565b63519b4bd3906145fd610202565b938492613ae4565b82528180614615600482016102b5565b03915afa801561487a576146669361463d925f92614846575b5061463890611c47565b611dde565b90602061465061464b613a99565b613aac565b6368d5dca69061465e610202565b958692613ae4565b82528180614676600482016102b5565b03915afa908115614841576146b5935f92614811575b50602061469f61469a613a99565b613aac565b63f8206140906146ad610202565b968792613ae4565b825281806146c5600482016102b5565b03915afa93841561480c576146ff946146f9936146f2925f926147d8575b506146ed90611c47565b611dde565b90926119de565b90611dde565b61473661470c60036113c1565b6010602061472061471b613a99565b613aac565b63313ce5679061472e610202565b958692613ae4565b82528180614746600482016102b5565b03915afa80156147d3576147a29461478161478d9361477c61477661478795614792995f916147a5575b5061421c565b91614200565b611dde565b9061259f565b91614512565b611dde565b61479c606461452e565b9061259f565b90565b6147c6915060203d81116147cc575b6147be8183610866565b810190613af9565b5f614770565b503d6147b4565b6115e9565b6146ed9192506147fe9060203d8111614805575b6147f68183610866565b810190613af9565b91906146e3565b503d6147ec565b6115e9565b61483391925060203d811161483a575b61482b8183610866565b8101906144ad565b905f61468c565b503d614821565b6115e9565b61463891925061486c9060203d8111614873575b6148648183610866565b810190613af9565b919061462e565b503d61485a565b6115e9565b6148a0915060203d81116148a6575b6148988183610866565b8101906144ad565b5f6145c8565b503d61488e565b6115e9565b67ffffffffffffffff81116148d0576148cc602091610848565b0190565b610852565b906148e76148e2836148b2565b61088f565b918252565b369037565b906149166148fe836148d5565b9260208061490c86936148b2565b92019103906148ec565b565b614920611a6a565b5061492a816149bb565b9061493d6149386020613ede565b6148f1565b918252602082015290565b614950611807565b505190565b61496b6149719161496461382a565b509261025b565b9161025b565b1090565b908151918151905252565b61499461498f61499992613d3a565b610620565b61025b565b90565b90565b6149b36149ae6149b89261499c565b610620565b61025b565b90565b6149d06149d5916149ca611807565b50612d47565b6123af565b6149df60ff614980565b16806149f46149ee601f61499f565b9161025b565b116149fc5790565b5f632cd44ac360e21b815280614a14600482016102b5565b0390fdfea26469706673582212205932222de237c96fa4ded63dcdb7c8018ed523b33fac54737a6d5191bbda692164736f6c634300081c0033",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend, activationThreshold *big.Int, flatFee *big.Int, maxActivatedOperators *big.Int, name string, version string) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend, activationThreshold, flatFee, maxActivatedOperators, name, version)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Contract *ContractCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Contract *ContractSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _Contract.Contract.Eip712Domain(&_Contract.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_Contract *ContractCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _Contract.Contract.Eip712Domain(&_Contract.CallOpts)
}

// EstimateRequestPrice is a free data retrieval call binding the contract method 0x48ff3be8.
//
// Solidity: function estimateRequestPrice(uint256 callbackGasLimit, uint256 gasPrice, uint256 numOfOperators) view returns(uint256)
func (_Contract *ContractCaller) EstimateRequestPrice(opts *bind.CallOpts, callbackGasLimit *big.Int, gasPrice *big.Int, numOfOperators *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "estimateRequestPrice", callbackGasLimit, gasPrice, numOfOperators)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateRequestPrice is a free data retrieval call binding the contract method 0x48ff3be8.
//
// Solidity: function estimateRequestPrice(uint256 callbackGasLimit, uint256 gasPrice, uint256 numOfOperators) view returns(uint256)
func (_Contract *ContractSession) EstimateRequestPrice(callbackGasLimit *big.Int, gasPrice *big.Int, numOfOperators *big.Int) (*big.Int, error) {
	return _Contract.Contract.EstimateRequestPrice(&_Contract.CallOpts, callbackGasLimit, gasPrice, numOfOperators)
}

// EstimateRequestPrice is a free data retrieval call binding the contract method 0x48ff3be8.
//
// Solidity: function estimateRequestPrice(uint256 callbackGasLimit, uint256 gasPrice, uint256 numOfOperators) view returns(uint256)
func (_Contract *ContractCallerSession) EstimateRequestPrice(callbackGasLimit *big.Int, gasPrice *big.Int, numOfOperators *big.Int) (*big.Int, error) {
	return _Contract.Contract.EstimateRequestPrice(&_Contract.CallOpts, callbackGasLimit, gasPrice, numOfOperators)
}

// EstimateRequestPrice0 is a free data retrieval call binding the contract method 0xa9f664be.
//
// Solidity: function estimateRequestPrice(uint256 callbackGasLimit, uint256 gasPrice) view returns(uint256)
func (_Contract *ContractCaller) EstimateRequestPrice0(opts *bind.CallOpts, callbackGasLimit *big.Int, gasPrice *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "estimateRequestPrice0", callbackGasLimit, gasPrice)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateRequestPrice0 is a free data retrieval call binding the contract method 0xa9f664be.
//
// Solidity: function estimateRequestPrice(uint256 callbackGasLimit, uint256 gasPrice) view returns(uint256)
func (_Contract *ContractSession) EstimateRequestPrice0(callbackGasLimit *big.Int, gasPrice *big.Int) (*big.Int, error) {
	return _Contract.Contract.EstimateRequestPrice0(&_Contract.CallOpts, callbackGasLimit, gasPrice)
}

// EstimateRequestPrice0 is a free data retrieval call binding the contract method 0xa9f664be.
//
// Solidity: function estimateRequestPrice(uint256 callbackGasLimit, uint256 gasPrice) view returns(uint256)
func (_Contract *ContractCallerSession) EstimateRequestPrice0(callbackGasLimit *big.Int, gasPrice *big.Int) (*big.Int, error) {
	return _Contract.Contract.EstimateRequestPrice0(&_Contract.CallOpts, callbackGasLimit, gasPrice)
}

// GetActivatedOperators is a free data retrieval call binding the contract method 0xecd21a7e.
//
// Solidity: function getActivatedOperators() view returns(address[])
func (_Contract *ContractCaller) GetActivatedOperators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getActivatedOperators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetActivatedOperators is a free data retrieval call binding the contract method 0xecd21a7e.
//
// Solidity: function getActivatedOperators() view returns(address[])
func (_Contract *ContractSession) GetActivatedOperators() ([]common.Address, error) {
	return _Contract.Contract.GetActivatedOperators(&_Contract.CallOpts)
}

// GetActivatedOperators is a free data retrieval call binding the contract method 0xecd21a7e.
//
// Solidity: function getActivatedOperators() view returns(address[])
func (_Contract *ContractCallerSession) GetActivatedOperators() ([]common.Address, error) {
	return _Contract.Contract.GetActivatedOperators(&_Contract.CallOpts)
}

// GetActivatedOperatorsAtRound is a free data retrieval call binding the contract method 0x1b6a72db.
//
// Solidity: function getActivatedOperatorsAtRound(uint256 round) view returns(address[])
func (_Contract *ContractCaller) GetActivatedOperatorsAtRound(opts *bind.CallOpts, round *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getActivatedOperatorsAtRound", round)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetActivatedOperatorsAtRound is a free data retrieval call binding the contract method 0x1b6a72db.
//
// Solidity: function getActivatedOperatorsAtRound(uint256 round) view returns(address[])
func (_Contract *ContractSession) GetActivatedOperatorsAtRound(round *big.Int) ([]common.Address, error) {
	return _Contract.Contract.GetActivatedOperatorsAtRound(&_Contract.CallOpts, round)
}

// GetActivatedOperatorsAtRound is a free data retrieval call binding the contract method 0x1b6a72db.
//
// Solidity: function getActivatedOperatorsAtRound(uint256 round) view returns(address[])
func (_Contract *ContractCallerSession) GetActivatedOperatorsAtRound(round *big.Int) ([]common.Address, error) {
	return _Contract.Contract.GetActivatedOperatorsAtRound(&_Contract.CallOpts, round)
}

// GetActivatedOperatorsAtRoundLength is a free data retrieval call binding the contract method 0x9ac5cfbc.
//
// Solidity: function getActivatedOperatorsAtRoundLength(uint256 round) view returns(uint256)
func (_Contract *ContractCaller) GetActivatedOperatorsAtRoundLength(opts *bind.CallOpts, round *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getActivatedOperatorsAtRoundLength", round)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetActivatedOperatorsAtRoundLength is a free data retrieval call binding the contract method 0x9ac5cfbc.
//
// Solidity: function getActivatedOperatorsAtRoundLength(uint256 round) view returns(uint256)
func (_Contract *ContractSession) GetActivatedOperatorsAtRoundLength(round *big.Int) (*big.Int, error) {
	return _Contract.Contract.GetActivatedOperatorsAtRoundLength(&_Contract.CallOpts, round)
}

// GetActivatedOperatorsAtRoundLength is a free data retrieval call binding the contract method 0x9ac5cfbc.
//
// Solidity: function getActivatedOperatorsAtRoundLength(uint256 round) view returns(uint256)
func (_Contract *ContractCallerSession) GetActivatedOperatorsAtRoundLength(round *big.Int) (*big.Int, error) {
	return _Contract.Contract.GetActivatedOperatorsAtRoundLength(&_Contract.CallOpts, round)
}

// GetActivatedOperatorsLength is a free data retrieval call binding the contract method 0x36088f52.
//
// Solidity: function getActivatedOperatorsLength() view returns(uint256)
func (_Contract *ContractCaller) GetActivatedOperatorsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getActivatedOperatorsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetActivatedOperatorsLength is a free data retrieval call binding the contract method 0x36088f52.
//
// Solidity: function getActivatedOperatorsLength() view returns(uint256)
func (_Contract *ContractSession) GetActivatedOperatorsLength() (*big.Int, error) {
	return _Contract.Contract.GetActivatedOperatorsLength(&_Contract.CallOpts)
}

// GetActivatedOperatorsLength is a free data retrieval call binding the contract method 0x36088f52.
//
// Solidity: function getActivatedOperatorsLength() view returns(uint256)
func (_Contract *ContractCallerSession) GetActivatedOperatorsLength() (*big.Int, error) {
	return _Contract.Contract.GetActivatedOperatorsLength(&_Contract.CallOpts)
}

// GetL1FeeCalculationMode is a free data retrieval call binding the contract method 0x11c593a8.
//
// Solidity: function getL1FeeCalculationMode() view returns(uint8 mode, uint8 coefficient)
func (_Contract *ContractCaller) GetL1FeeCalculationMode(opts *bind.CallOpts) (struct {
	Mode        uint8
	Coefficient uint8
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getL1FeeCalculationMode")

	outstruct := new(struct {
		Mode        uint8
		Coefficient uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Mode = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Coefficient = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// GetL1FeeCalculationMode is a free data retrieval call binding the contract method 0x11c593a8.
//
// Solidity: function getL1FeeCalculationMode() view returns(uint8 mode, uint8 coefficient)
func (_Contract *ContractSession) GetL1FeeCalculationMode() (struct {
	Mode        uint8
	Coefficient uint8
}, error) {
	return _Contract.Contract.GetL1FeeCalculationMode(&_Contract.CallOpts)
}

// GetL1FeeCalculationMode is a free data retrieval call binding the contract method 0x11c593a8.
//
// Solidity: function getL1FeeCalculationMode() view returns(uint8 mode, uint8 coefficient)
func (_Contract *ContractCallerSession) GetL1FeeCalculationMode() (struct {
	Mode        uint8
	Coefficient uint8
}, error) {
	return _Contract.Contract.GetL1FeeCalculationMode(&_Contract.CallOpts)
}

// GetMerkleRoot is a free data retrieval call binding the contract method 0x4869bfb6.
//
// Solidity: function getMerkleRoot(bytes32[] leaves) pure returns(bytes32)
func (_Contract *ContractCaller) GetMerkleRoot(opts *bind.CallOpts, leaves [][32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getMerkleRoot", leaves)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetMerkleRoot is a free data retrieval call binding the contract method 0x4869bfb6.
//
// Solidity: function getMerkleRoot(bytes32[] leaves) pure returns(bytes32)
func (_Contract *ContractSession) GetMerkleRoot(leaves [][32]byte) ([32]byte, error) {
	return _Contract.Contract.GetMerkleRoot(&_Contract.CallOpts, leaves)
}

// GetMerkleRoot is a free data retrieval call binding the contract method 0x4869bfb6.
//
// Solidity: function getMerkleRoot(bytes32[] leaves) pure returns(bytes32)
func (_Contract *ContractCallerSession) GetMerkleRoot(leaves [][32]byte) ([32]byte, error) {
	return _Contract.Contract.GetMerkleRoot(&_Contract.CallOpts, leaves)
}

// GetMessageHash is a free data retrieval call binding the contract method 0x3506a24a.
//
// Solidity: function getMessageHash(uint256 round, bytes32 cv) view returns(bytes32)
func (_Contract *ContractCaller) GetMessageHash(opts *bind.CallOpts, round *big.Int, cv [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getMessageHash", round, cv)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetMessageHash is a free data retrieval call binding the contract method 0x3506a24a.
//
// Solidity: function getMessageHash(uint256 round, bytes32 cv) view returns(bytes32)
func (_Contract *ContractSession) GetMessageHash(round *big.Int, cv [32]byte) ([32]byte, error) {
	return _Contract.Contract.GetMessageHash(&_Contract.CallOpts, round, cv)
}

// GetMessageHash is a free data retrieval call binding the contract method 0x3506a24a.
//
// Solidity: function getMessageHash(uint256 round, bytes32 cv) view returns(bytes32)
func (_Contract *ContractCallerSession) GetMessageHash(round *big.Int, cv [32]byte) ([32]byte, error) {
	return _Contract.Contract.GetMessageHash(&_Contract.CallOpts, round, cv)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCallerSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// SActivatedOperatorOrder is a free data retrieval call binding the contract method 0x60ce6c3b.
//
// Solidity: function s_activatedOperatorOrder(address operator) view returns(uint256)
func (_Contract *ContractCaller) SActivatedOperatorOrder(opts *bind.CallOpts, operator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "s_activatedOperatorOrder", operator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SActivatedOperatorOrder is a free data retrieval call binding the contract method 0x60ce6c3b.
//
// Solidity: function s_activatedOperatorOrder(address operator) view returns(uint256)
func (_Contract *ContractSession) SActivatedOperatorOrder(operator common.Address) (*big.Int, error) {
	return _Contract.Contract.SActivatedOperatorOrder(&_Contract.CallOpts, operator)
}

// SActivatedOperatorOrder is a free data retrieval call binding the contract method 0x60ce6c3b.
//
// Solidity: function s_activatedOperatorOrder(address operator) view returns(uint256)
func (_Contract *ContractCallerSession) SActivatedOperatorOrder(operator common.Address) (*big.Int, error) {
	return _Contract.Contract.SActivatedOperatorOrder(&_Contract.CallOpts, operator)
}

// SActivatedOperatorOrderAtRound is a free data retrieval call binding the contract method 0xe5984534.
//
// Solidity: function s_activatedOperatorOrderAtRound(uint256 round, address operator) view returns(uint256)
func (_Contract *ContractCaller) SActivatedOperatorOrderAtRound(opts *bind.CallOpts, round *big.Int, operator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "s_activatedOperatorOrderAtRound", round, operator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SActivatedOperatorOrderAtRound is a free data retrieval call binding the contract method 0xe5984534.
//
// Solidity: function s_activatedOperatorOrderAtRound(uint256 round, address operator) view returns(uint256)
func (_Contract *ContractSession) SActivatedOperatorOrderAtRound(round *big.Int, operator common.Address) (*big.Int, error) {
	return _Contract.Contract.SActivatedOperatorOrderAtRound(&_Contract.CallOpts, round, operator)
}

// SActivatedOperatorOrderAtRound is a free data retrieval call binding the contract method 0xe5984534.
//
// Solidity: function s_activatedOperatorOrderAtRound(uint256 round, address operator) view returns(uint256)
func (_Contract *ContractCallerSession) SActivatedOperatorOrderAtRound(round *big.Int, operator common.Address) (*big.Int, error) {
	return _Contract.Contract.SActivatedOperatorOrderAtRound(&_Contract.CallOpts, round, operator)
}

// SActivationThreshold is a free data retrieval call binding the contract method 0xa5ab3014.
//
// Solidity: function s_activationThreshold() view returns(uint256)
func (_Contract *ContractCaller) SActivationThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "s_activationThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SActivationThreshold is a free data retrieval call binding the contract method 0xa5ab3014.
//
// Solidity: function s_activationThreshold() view returns(uint256)
func (_Contract *ContractSession) SActivationThreshold() (*big.Int, error) {
	return _Contract.Contract.SActivationThreshold(&_Contract.CallOpts)
}

// SActivationThreshold is a free data retrieval call binding the contract method 0xa5ab3014.
//
// Solidity: function s_activationThreshold() view returns(uint256)
func (_Contract *ContractCallerSession) SActivationThreshold() (*big.Int, error) {
	return _Contract.Contract.SActivationThreshold(&_Contract.CallOpts)
}

// SDepositAmount is a free data retrieval call binding the contract method 0x42875fad.
//
// Solidity: function s_depositAmount(address operator) view returns(uint256 depositAmount)
func (_Contract *ContractCaller) SDepositAmount(opts *bind.CallOpts, operator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "s_depositAmount", operator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SDepositAmount is a free data retrieval call binding the contract method 0x42875fad.
//
// Solidity: function s_depositAmount(address operator) view returns(uint256 depositAmount)
func (_Contract *ContractSession) SDepositAmount(operator common.Address) (*big.Int, error) {
	return _Contract.Contract.SDepositAmount(&_Contract.CallOpts, operator)
}

// SDepositAmount is a free data retrieval call binding the contract method 0x42875fad.
//
// Solidity: function s_depositAmount(address operator) view returns(uint256 depositAmount)
func (_Contract *ContractCallerSession) SDepositAmount(operator common.Address) (*big.Int, error) {
	return _Contract.Contract.SDepositAmount(&_Contract.CallOpts, operator)
}

// SFlatFee is a free data retrieval call binding the contract method 0x0c048a81.
//
// Solidity: function s_flatFee() view returns(uint256)
func (_Contract *ContractCaller) SFlatFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "s_flatFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SFlatFee is a free data retrieval call binding the contract method 0x0c048a81.
//
// Solidity: function s_flatFee() view returns(uint256)
func (_Contract *ContractSession) SFlatFee() (*big.Int, error) {
	return _Contract.Contract.SFlatFee(&_Contract.CallOpts)
}

// SFlatFee is a free data retrieval call binding the contract method 0x0c048a81.
//
// Solidity: function s_flatFee() view returns(uint256)
func (_Contract *ContractCallerSession) SFlatFee() (*big.Int, error) {
	return _Contract.Contract.SFlatFee(&_Contract.CallOpts)
}

// SMaxActivatedOperators is a free data retrieval call binding the contract method 0x9c181820.
//
// Solidity: function s_maxActivatedOperators() view returns(uint256)
func (_Contract *ContractCaller) SMaxActivatedOperators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "s_maxActivatedOperators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SMaxActivatedOperators is a free data retrieval call binding the contract method 0x9c181820.
//
// Solidity: function s_maxActivatedOperators() view returns(uint256)
func (_Contract *ContractSession) SMaxActivatedOperators() (*big.Int, error) {
	return _Contract.Contract.SMaxActivatedOperators(&_Contract.CallOpts)
}

// SMaxActivatedOperators is a free data retrieval call binding the contract method 0x9c181820.
//
// Solidity: function s_maxActivatedOperators() view returns(uint256)
func (_Contract *ContractCallerSession) SMaxActivatedOperators() (*big.Int, error) {
	return _Contract.Contract.SMaxActivatedOperators(&_Contract.CallOpts)
}

// SRequestInfo is a free data retrieval call binding the contract method 0x39d0c151.
//
// Solidity: function s_requestInfo(uint256 round) view returns(address consumer, uint256 requestedTime, uint256 cost, uint256 callbackGasLimit)
func (_Contract *ContractCaller) SRequestInfo(opts *bind.CallOpts, round *big.Int) (struct {
	Consumer         common.Address
	RequestedTime    *big.Int
	Cost             *big.Int
	CallbackGasLimit *big.Int
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "s_requestInfo", round)

	outstruct := new(struct {
		Consumer         common.Address
		RequestedTime    *big.Int
		Cost             *big.Int
		CallbackGasLimit *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Consumer = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.RequestedTime = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Cost = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.CallbackGasLimit = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// SRequestInfo is a free data retrieval call binding the contract method 0x39d0c151.
//
// Solidity: function s_requestInfo(uint256 round) view returns(address consumer, uint256 requestedTime, uint256 cost, uint256 callbackGasLimit)
func (_Contract *ContractSession) SRequestInfo(round *big.Int) (struct {
	Consumer         common.Address
	RequestedTime    *big.Int
	Cost             *big.Int
	CallbackGasLimit *big.Int
}, error) {
	return _Contract.Contract.SRequestInfo(&_Contract.CallOpts, round)
}

// SRequestInfo is a free data retrieval call binding the contract method 0x39d0c151.
//
// Solidity: function s_requestInfo(uint256 round) view returns(address consumer, uint256 requestedTime, uint256 cost, uint256 callbackGasLimit)
func (_Contract *ContractCallerSession) SRequestInfo(round *big.Int) (struct {
	Consumer         common.Address
	RequestedTime    *big.Int
	Cost             *big.Int
	CallbackGasLimit *big.Int
}, error) {
	return _Contract.Contract.SRequestInfo(&_Contract.CallOpts, round)
}

// SRoundInfo is a free data retrieval call binding the contract method 0xeb16e23b.
//
// Solidity: function s_roundInfo(uint256 round) view returns(bytes32 merkleRoot, uint256 randomNumber, bool fulfillSucceeded)
func (_Contract *ContractCaller) SRoundInfo(opts *bind.CallOpts, round *big.Int) (struct {
	MerkleRoot       [32]byte
	RandomNumber     *big.Int
	FulfillSucceeded bool
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "s_roundInfo", round)

	outstruct := new(struct {
		MerkleRoot       [32]byte
		RandomNumber     *big.Int
		FulfillSucceeded bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.MerkleRoot = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.RandomNumber = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.FulfillSucceeded = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// SRoundInfo is a free data retrieval call binding the contract method 0xeb16e23b.
//
// Solidity: function s_roundInfo(uint256 round) view returns(bytes32 merkleRoot, uint256 randomNumber, bool fulfillSucceeded)
func (_Contract *ContractSession) SRoundInfo(round *big.Int) (struct {
	MerkleRoot       [32]byte
	RandomNumber     *big.Int
	FulfillSucceeded bool
}, error) {
	return _Contract.Contract.SRoundInfo(&_Contract.CallOpts, round)
}

// SRoundInfo is a free data retrieval call binding the contract method 0xeb16e23b.
//
// Solidity: function s_roundInfo(uint256 round) view returns(bytes32 merkleRoot, uint256 randomNumber, bool fulfillSucceeded)
func (_Contract *ContractCallerSession) SRoundInfo(round *big.Int) (struct {
	MerkleRoot       [32]byte
	RandomNumber     *big.Int
	FulfillSucceeded bool
}, error) {
	return _Contract.Contract.SRoundInfo(&_Contract.CallOpts, round)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Contract *ContractTransactor) Activate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "activate")
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Contract *ContractSession) Activate() (*types.Transaction, error) {
	return _Contract.Contract.Activate(&_Contract.TransactOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Contract *ContractTransactorSession) Activate() (*types.Transaction, error) {
	return _Contract.Contract.Activate(&_Contract.TransactOpts)
}

// Deactivate is a paid mutator transaction binding the contract method 0x51b42b00.
//
// Solidity: function deactivate() returns()
func (_Contract *ContractTransactor) Deactivate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "deactivate")
}

// Deactivate is a paid mutator transaction binding the contract method 0x51b42b00.
//
// Solidity: function deactivate() returns()
func (_Contract *ContractSession) Deactivate() (*types.Transaction, error) {
	return _Contract.Contract.Deactivate(&_Contract.TransactOpts)
}

// Deactivate is a paid mutator transaction binding the contract method 0x51b42b00.
//
// Solidity: function deactivate() returns()
func (_Contract *ContractTransactorSession) Deactivate() (*types.Transaction, error) {
	return _Contract.Contract.Deactivate(&_Contract.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_Contract *ContractTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_Contract *ContractSession) Deposit() (*types.Transaction, error) {
	return _Contract.Contract.Deposit(&_Contract.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_Contract *ContractTransactorSession) Deposit() (*types.Transaction, error) {
	return _Contract.Contract.Deposit(&_Contract.TransactOpts)
}

// DepositAndActivate is a paid mutator transaction binding the contract method 0x77343032.
//
// Solidity: function depositAndActivate() payable returns()
func (_Contract *ContractTransactor) DepositAndActivate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "depositAndActivate")
}

// DepositAndActivate is a paid mutator transaction binding the contract method 0x77343032.
//
// Solidity: function depositAndActivate() payable returns()
func (_Contract *ContractSession) DepositAndActivate() (*types.Transaction, error) {
	return _Contract.Contract.DepositAndActivate(&_Contract.TransactOpts)
}

// DepositAndActivate is a paid mutator transaction binding the contract method 0x77343032.
//
// Solidity: function depositAndActivate() payable returns()
func (_Contract *ContractTransactorSession) DepositAndActivate() (*types.Transaction, error) {
	return _Contract.Contract.DepositAndActivate(&_Contract.TransactOpts)
}

// GenerateRandomNumber is a paid mutator transaction binding the contract method 0xe8fd14e0.
//
// Solidity: function generateRandomNumber(uint256 round, bytes32[] secrets, uint8[] vs, bytes32[] rs, bytes32[] ss) returns()
func (_Contract *ContractTransactor) GenerateRandomNumber(opts *bind.TransactOpts, round *big.Int, secrets [][32]byte, vs []uint8, rs [][32]byte, ss [][32]byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "generateRandomNumber", round, secrets, vs, rs, ss)
}

// GenerateRandomNumber is a paid mutator transaction binding the contract method 0xe8fd14e0.
//
// Solidity: function generateRandomNumber(uint256 round, bytes32[] secrets, uint8[] vs, bytes32[] rs, bytes32[] ss) returns()
func (_Contract *ContractSession) GenerateRandomNumber(round *big.Int, secrets [][32]byte, vs []uint8, rs [][32]byte, ss [][32]byte) (*types.Transaction, error) {
	return _Contract.Contract.GenerateRandomNumber(&_Contract.TransactOpts, round, secrets, vs, rs, ss)
}

// GenerateRandomNumber is a paid mutator transaction binding the contract method 0xe8fd14e0.
//
// Solidity: function generateRandomNumber(uint256 round, bytes32[] secrets, uint8[] vs, bytes32[] rs, bytes32[] ss) returns()
func (_Contract *ContractTransactorSession) GenerateRandomNumber(round *big.Int, secrets [][32]byte, vs []uint8, rs [][32]byte, ss [][32]byte) (*types.Transaction, error) {
	return _Contract.Contract.GenerateRandomNumber(&_Contract.TransactOpts, round, secrets, vs, rs, ss)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractSession) RenounceOwnership() (*types.Transaction, error) {
	return _Contract.Contract.RenounceOwnership(&_Contract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Contract.Contract.RenounceOwnership(&_Contract.TransactOpts)
}

// RequestRandomNumber is a paid mutator transaction binding the contract method 0xb5f3abb0.
//
// Solidity: function requestRandomNumber(uint32 callbackGasLimit) payable returns(uint256 round)
func (_Contract *ContractTransactor) RequestRandomNumber(opts *bind.TransactOpts, callbackGasLimit uint32) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "requestRandomNumber", callbackGasLimit)
}

// RequestRandomNumber is a paid mutator transaction binding the contract method 0xb5f3abb0.
//
// Solidity: function requestRandomNumber(uint32 callbackGasLimit) payable returns(uint256 round)
func (_Contract *ContractSession) RequestRandomNumber(callbackGasLimit uint32) (*types.Transaction, error) {
	return _Contract.Contract.RequestRandomNumber(&_Contract.TransactOpts, callbackGasLimit)
}

// RequestRandomNumber is a paid mutator transaction binding the contract method 0xb5f3abb0.
//
// Solidity: function requestRandomNumber(uint32 callbackGasLimit) payable returns(uint256 round)
func (_Contract *ContractTransactorSession) RequestRandomNumber(callbackGasLimit uint32) (*types.Transaction, error) {
	return _Contract.Contract.RequestRandomNumber(&_Contract.TransactOpts, callbackGasLimit)
}

// SetL1FeeCalculation is a paid mutator transaction binding the contract method 0x14530741.
//
// Solidity: function setL1FeeCalculation(uint8 mode, uint8 coefficient) returns()
func (_Contract *ContractTransactor) SetL1FeeCalculation(opts *bind.TransactOpts, mode uint8, coefficient uint8) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setL1FeeCalculation", mode, coefficient)
}

// SetL1FeeCalculation is a paid mutator transaction binding the contract method 0x14530741.
//
// Solidity: function setL1FeeCalculation(uint8 mode, uint8 coefficient) returns()
func (_Contract *ContractSession) SetL1FeeCalculation(mode uint8, coefficient uint8) (*types.Transaction, error) {
	return _Contract.Contract.SetL1FeeCalculation(&_Contract.TransactOpts, mode, coefficient)
}

// SetL1FeeCalculation is a paid mutator transaction binding the contract method 0x14530741.
//
// Solidity: function setL1FeeCalculation(uint8 mode, uint8 coefficient) returns()
func (_Contract *ContractTransactorSession) SetL1FeeCalculation(mode uint8, coefficient uint8) (*types.Transaction, error) {
	return _Contract.Contract.SetL1FeeCalculation(&_Contract.TransactOpts, mode, coefficient)
}

// SubmitMerkleRoot is a paid mutator transaction binding the contract method 0xefd50b21.
//
// Solidity: function submitMerkleRoot(uint256 round, bytes32 merkleRoot) returns()
func (_Contract *ContractTransactor) SubmitMerkleRoot(opts *bind.TransactOpts, round *big.Int, merkleRoot [32]byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "submitMerkleRoot", round, merkleRoot)
}

// SubmitMerkleRoot is a paid mutator transaction binding the contract method 0xefd50b21.
//
// Solidity: function submitMerkleRoot(uint256 round, bytes32 merkleRoot) returns()
func (_Contract *ContractSession) SubmitMerkleRoot(round *big.Int, merkleRoot [32]byte) (*types.Transaction, error) {
	return _Contract.Contract.SubmitMerkleRoot(&_Contract.TransactOpts, round, merkleRoot)
}

// SubmitMerkleRoot is a paid mutator transaction binding the contract method 0xefd50b21.
//
// Solidity: function submitMerkleRoot(uint256 round, bytes32 merkleRoot) returns()
func (_Contract *ContractTransactorSession) SubmitMerkleRoot(round *big.Int, merkleRoot [32]byte) (*types.Transaction, error) {
	return _Contract.Contract.SubmitMerkleRoot(&_Contract.TransactOpts, round, merkleRoot)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, newOwner)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Contract *ContractTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Contract *ContractSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Withdraw(&_Contract.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns()
func (_Contract *ContractTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Withdraw(&_Contract.TransactOpts, amount)
}

// ContractActivatedIterator is returned from FilterActivated and is used to iterate over the raw logs and unpacked data for Activated events raised by the Contract contract.
type ContractActivatedIterator struct {
	Event *ContractActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractActivated represents a Activated event raised by the Contract contract.
type ContractActivated struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterActivated is a free log retrieval operation binding the contract event 0x0cc43938d137e7efade6a531f663e78c1fc75257b0d65ffda2fdaf70cb49cdf9.
//
// Solidity: event Activated(address operator)
func (_Contract *ContractFilterer) FilterActivated(opts *bind.FilterOpts) (*ContractActivatedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Activated")
	if err != nil {
		return nil, err
	}
	return &ContractActivatedIterator{contract: _Contract.contract, event: "Activated", logs: logs, sub: sub}, nil
}

// WatchActivated is a free log subscription operation binding the contract event 0x0cc43938d137e7efade6a531f663e78c1fc75257b0d65ffda2fdaf70cb49cdf9.
//
// Solidity: event Activated(address operator)
func (_Contract *ContractFilterer) WatchActivated(opts *bind.WatchOpts, sink chan<- *ContractActivated) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Activated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractActivated)
				if err := _Contract.contract.UnpackLog(event, "Activated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivated is a log parse operation binding the contract event 0x0cc43938d137e7efade6a531f663e78c1fc75257b0d65ffda2fdaf70cb49cdf9.
//
// Solidity: event Activated(address operator)
func (_Contract *ContractFilterer) ParseActivated(log types.Log) (*ContractActivated, error) {
	event := new(ContractActivated)
	if err := _Contract.contract.UnpackLog(event, "Activated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractDeActivatedIterator is returned from FilterDeActivated and is used to iterate over the raw logs and unpacked data for DeActivated events raised by the Contract contract.
type ContractDeActivatedIterator struct {
	Event *ContractDeActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractDeActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractDeActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractDeActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractDeActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractDeActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractDeActivated represents a DeActivated event raised by the Contract contract.
type ContractDeActivated struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDeActivated is a free log retrieval operation binding the contract event 0x5d10eb48d8c00fb4cc9120533a99e2eac5eb9d0f8ec06216b2e4d5b1ff175a4d.
//
// Solidity: event DeActivated(address operator)
func (_Contract *ContractFilterer) FilterDeActivated(opts *bind.FilterOpts) (*ContractDeActivatedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "DeActivated")
	if err != nil {
		return nil, err
	}
	return &ContractDeActivatedIterator{contract: _Contract.contract, event: "DeActivated", logs: logs, sub: sub}, nil
}

// WatchDeActivated is a free log subscription operation binding the contract event 0x5d10eb48d8c00fb4cc9120533a99e2eac5eb9d0f8ec06216b2e4d5b1ff175a4d.
//
// Solidity: event DeActivated(address operator)
func (_Contract *ContractFilterer) WatchDeActivated(opts *bind.WatchOpts, sink chan<- *ContractDeActivated) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "DeActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractDeActivated)
				if err := _Contract.contract.UnpackLog(event, "DeActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeActivated is a log parse operation binding the contract event 0x5d10eb48d8c00fb4cc9120533a99e2eac5eb9d0f8ec06216b2e4d5b1ff175a4d.
//
// Solidity: event DeActivated(address operator)
func (_Contract *ContractFilterer) ParseDeActivated(log types.Log) (*ContractDeActivated, error) {
	event := new(ContractDeActivated)
	if err := _Contract.contract.UnpackLog(event, "DeActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the Contract contract.
type ContractEIP712DomainChangedIterator struct {
	Event *ContractEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEIP712DomainChanged represents a EIP712DomainChanged event raised by the Contract contract.
type ContractEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_Contract *ContractFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*ContractEIP712DomainChangedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &ContractEIP712DomainChangedIterator{contract: _Contract.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_Contract *ContractFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *ContractEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEIP712DomainChanged)
				if err := _Contract.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_Contract *ContractFilterer) ParseEIP712DomainChanged(log types.Log) (*ContractEIP712DomainChanged, error) {
	event := new(ContractEIP712DomainChanged)
	if err := _Contract.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractL1FeeCalculationSetIterator is returned from FilterL1FeeCalculationSet and is used to iterate over the raw logs and unpacked data for L1FeeCalculationSet events raised by the Contract contract.
type ContractL1FeeCalculationSetIterator struct {
	Event *ContractL1FeeCalculationSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractL1FeeCalculationSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractL1FeeCalculationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractL1FeeCalculationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractL1FeeCalculationSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractL1FeeCalculationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractL1FeeCalculationSet represents a L1FeeCalculationSet event raised by the Contract contract.
type ContractL1FeeCalculationSet struct {
	Mode        uint8
	Coefficient uint8
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterL1FeeCalculationSet is a free log retrieval operation binding the contract event 0x8e63dc2f2e669ce73bebd2580bb9dd9a5d17fa2d046ac02057d8349fc0b0c2f3.
//
// Solidity: event L1FeeCalculationSet(uint8 mode, uint8 coefficient)
func (_Contract *ContractFilterer) FilterL1FeeCalculationSet(opts *bind.FilterOpts) (*ContractL1FeeCalculationSetIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "L1FeeCalculationSet")
	if err != nil {
		return nil, err
	}
	return &ContractL1FeeCalculationSetIterator{contract: _Contract.contract, event: "L1FeeCalculationSet", logs: logs, sub: sub}, nil
}

// WatchL1FeeCalculationSet is a free log subscription operation binding the contract event 0x8e63dc2f2e669ce73bebd2580bb9dd9a5d17fa2d046ac02057d8349fc0b0c2f3.
//
// Solidity: event L1FeeCalculationSet(uint8 mode, uint8 coefficient)
func (_Contract *ContractFilterer) WatchL1FeeCalculationSet(opts *bind.WatchOpts, sink chan<- *ContractL1FeeCalculationSet) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "L1FeeCalculationSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractL1FeeCalculationSet)
				if err := _Contract.contract.UnpackLog(event, "L1FeeCalculationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseL1FeeCalculationSet is a log parse operation binding the contract event 0x8e63dc2f2e669ce73bebd2580bb9dd9a5d17fa2d046ac02057d8349fc0b0c2f3.
//
// Solidity: event L1FeeCalculationSet(uint8 mode, uint8 coefficient)
func (_Contract *ContractFilterer) ParseL1FeeCalculationSet(log types.Log) (*ContractL1FeeCalculationSet, error) {
	event := new(ContractL1FeeCalculationSet)
	if err := _Contract.contract.UnpackLog(event, "L1FeeCalculationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Contract contract.
type ContractOwnershipTransferredIterator struct {
	Event *ContractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractOwnershipTransferred represents a OwnershipTransferred event raised by the Contract contract.
type ContractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractOwnershipTransferredIterator{contract: _Contract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractOwnershipTransferred)
				if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) ParseOwnershipTransferred(log types.Log) (*ContractOwnershipTransferred, error) {
	event := new(ContractOwnershipTransferred)
	if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRandomNumberGeneratedIterator is returned from FilterRandomNumberGenerated and is used to iterate over the raw logs and unpacked data for RandomNumberGenerated events raised by the Contract contract.
type ContractRandomNumberGeneratedIterator struct {
	Event *ContractRandomNumberGenerated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRandomNumberGeneratedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRandomNumberGenerated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRandomNumberGenerated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRandomNumberGeneratedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRandomNumberGeneratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRandomNumberGenerated represents a RandomNumberGenerated event raised by the Contract contract.
type ContractRandomNumberGenerated struct {
	Round        *big.Int
	RandomNumber *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRandomNumberGenerated is a free log retrieval operation binding the contract event 0x252851c72bba973a3eff4c55d976631b74c5e463b736ab3ba7ea37cbe40bbc19.
//
// Solidity: event RandomNumberGenerated(uint256 round, uint256 randomNumber)
func (_Contract *ContractFilterer) FilterRandomNumberGenerated(opts *bind.FilterOpts) (*ContractRandomNumberGeneratedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RandomNumberGenerated")
	if err != nil {
		return nil, err
	}
	return &ContractRandomNumberGeneratedIterator{contract: _Contract.contract, event: "RandomNumberGenerated", logs: logs, sub: sub}, nil
}

// WatchRandomNumberGenerated is a free log subscription operation binding the contract event 0x252851c72bba973a3eff4c55d976631b74c5e463b736ab3ba7ea37cbe40bbc19.
//
// Solidity: event RandomNumberGenerated(uint256 round, uint256 randomNumber)
func (_Contract *ContractFilterer) WatchRandomNumberGenerated(opts *bind.WatchOpts, sink chan<- *ContractRandomNumberGenerated) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RandomNumberGenerated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRandomNumberGenerated)
				if err := _Contract.contract.UnpackLog(event, "RandomNumberGenerated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRandomNumberGenerated is a log parse operation binding the contract event 0x252851c72bba973a3eff4c55d976631b74c5e463b736ab3ba7ea37cbe40bbc19.
//
// Solidity: event RandomNumberGenerated(uint256 round, uint256 randomNumber)
func (_Contract *ContractFilterer) ParseRandomNumberGenerated(log types.Log) (*ContractRandomNumberGenerated, error) {
	event := new(ContractRandomNumberGenerated)
	if err := _Contract.contract.UnpackLog(event, "RandomNumberGenerated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractRandomNumberRequestedIterator is returned from FilterRandomNumberRequested and is used to iterate over the raw logs and unpacked data for RandomNumberRequested events raised by the Contract contract.
type ContractRandomNumberRequestedIterator struct {
	Event *ContractRandomNumberRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractRandomNumberRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRandomNumberRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractRandomNumberRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractRandomNumberRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractRandomNumberRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractRandomNumberRequested represents a RandomNumberRequested event raised by the Contract contract.
type ContractRandomNumberRequested struct {
	Round              *big.Int
	ActivatedOperators []common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRandomNumberRequested is a free log retrieval operation binding the contract event 0xa76cb50e13ed7dc76531452d748a43f7f4822af11af8b0c27781247c32035b74.
//
// Solidity: event RandomNumberRequested(uint256 round, address[] activatedOperators)
func (_Contract *ContractFilterer) FilterRandomNumberRequested(opts *bind.FilterOpts) (*ContractRandomNumberRequestedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RandomNumberRequested")
	if err != nil {
		return nil, err
	}
	return &ContractRandomNumberRequestedIterator{contract: _Contract.contract, event: "RandomNumberRequested", logs: logs, sub: sub}, nil
}

// WatchRandomNumberRequested is a free log subscription operation binding the contract event 0xa76cb50e13ed7dc76531452d748a43f7f4822af11af8b0c27781247c32035b74.
//
// Solidity: event RandomNumberRequested(uint256 round, address[] activatedOperators)
func (_Contract *ContractFilterer) WatchRandomNumberRequested(opts *bind.WatchOpts, sink chan<- *ContractRandomNumberRequested) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RandomNumberRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractRandomNumberRequested)
				if err := _Contract.contract.UnpackLog(event, "RandomNumberRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRandomNumberRequested is a log parse operation binding the contract event 0xa76cb50e13ed7dc76531452d748a43f7f4822af11af8b0c27781247c32035b74.
//
// Solidity: event RandomNumberRequested(uint256 round, address[] activatedOperators)
func (_Contract *ContractFilterer) ParseRandomNumberRequested(log types.Log) (*ContractRandomNumberRequested, error) {
	event := new(ContractRandomNumberRequested)
	if err := _Contract.contract.UnpackLog(event, "RandomNumberRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
